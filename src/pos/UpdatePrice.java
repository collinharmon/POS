/*
    Point of Sale System Project
    Authors: Clayton Barber, Brandon Barton, Declan Brennan, Maximilian Hasselbusch, Eric Metcalf
    Last Updated: 20 November 2015
 */
package pos;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;

public class UpdatePrice extends javax.swing.JFrame {

    Connection con;

    /**
     * Creates new form UpdatePrice
     */
    public UpdatePrice(Connection con) {
        this.con = con;
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ItemInformation = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ItemID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Price = new javax.swing.JTextField();
        Submit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(180, 230, 255));

        jLabel1.setText("Update Price");

        jLabel2.setText("WPS");

        ItemInformation.setBackground(new java.awt.Color(180, 230, 255));
        ItemInformation.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Information"));

        jLabel3.setText("Item SKU");

        jLabel4.setText("New Price");

        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ItemInformationLayout = new javax.swing.GroupLayout(ItemInformation);
        ItemInformation.setLayout(ItemInformationLayout);
        ItemInformationLayout.setHorizontalGroup(
                ItemInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ItemInformationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(ItemInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ItemID)
                                        .addGroup(ItemInformationLayout.createSequentialGroup()
                                                .addGroup(ItemInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3)
                                                        .addComponent(jLabel4))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(ItemInformationLayout.createSequentialGroup()
                                                .addComponent(Price, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Submit)))
                                .addContainerGap())
        );
        ItemInformationLayout.setVerticalGroup(
                ItemInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ItemInformationLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ItemInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Submit))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ItemInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel2)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        String sku = ItemID.getText();
        String price = Price.getText();
        if (price.equals("") || sku.equals("")) {
            ItemID.setText("Invalid input: Fields cannot be null");
        } else if (!checkString(sku)) {
            ItemID.setText("Invalid input: Item ID must be a 8 digit number");
        } else if (!checkPrice(price)) {
            ItemID.setText("Invalid input: Price must be a number");
        } else {
            try {
                Statement s = con.createStatement();
                s.executeUpdate("update pos.games set price = " + price + " where sku = " + sku + "");
                this.dispose();
                UpdateSuccessful us = new UpdateSuccessful();
            } catch (SQLException sqe) {
                System.err.println("Unable to delete from pos.games");
                System.err.println(sqe.getMessage());
            }
        }
    }//GEN-LAST:event_SubmitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ItemID;
    private javax.swing.JPanel ItemInformation;
    private javax.swing.JTextField Price;
    private javax.swing.JButton Submit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private boolean checkString(String iid) {
        if (iid.isEmpty()) {
            return false;
        }
        if (iid.length() != 8) {
            return false;
        }
        for (int i = 0; i < iid.length(); i++) {
            if (i == 0 && iid.charAt(i) == '-') {
                if (iid.length() == 1) {
                    return false;
                } else {
                    continue;
                }
            }
            if (Character.digit(iid.charAt(i), 10) < 0) {
                return false;
            }
        }
        return true;
    }

    private boolean checkPrice(String price) {
        if (price.isEmpty()) {
            return false;
        }
        for (int i = 0; i < price.length(); i++) {
            if (i == 0 && price.charAt(i) == '-') {
                if (price.length() == 1) {
                    return false;
                } else {
                    continue;
                }
            }
            if (price.charAt(i) != '.' && (Character.digit(price.charAt(i), 10) < 0)) {
                return false;
            }
        }
        return true;
    }
}
